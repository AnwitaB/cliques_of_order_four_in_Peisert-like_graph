from sympy.ntheory.factor_ import totient
from math import gcd
import cmath
import numpy as np

# the function below calculates the number of cliques of order four in the Peisert-like graph G*(n) where n=p^r
def cliques_four(n,H):                 # H is the connection set of the graph      
  b1=(int)(totient(n)/2)
  number=0
  flag1, flag2, flag3, flag4, flag5, flag6=0,0,0,0,0,0
  temp1, temp2, temp3, temp4, temp5, temp6=0,0,0,0,0,0

# now, checking if each tuple (i,j,k,l) forms a clique
  for i in range (n):       
    for j in range(i+1,n):              # checking if ij is an edge
      temp1, flag1=(i-j)%n,0
      for m in range (b1):
        if temp1==H[m]:
          flag1=1
          break
      if flag1==0:
        continue
      for k in range(j+1,n):           # checking if ik and jk are edges
        temp2, temp3, flag2, flag3=(i-k)%n, (j-k)%n, 0, 0
        for m in range (b1):
          if temp2==H[m]:
            flag2=1
            break
        for m in range (b1):
          if temp3==H[m]:
            flag3=1
            break
        if flag2==0 or flag3==0:
          continue
        for l in range(k+1,n):        # checking if il,jl,kl are edges
          temp4, temp5, temp6, flag4, flag5, flag6=(i-l)%n, (j-l)%n, (k-l)%n, 0, 0, 0
          for m in range (b1):
            if temp4==H[m]:
              flag4=1
              break
          for m in range (b1):
            if temp5==H[m]:
              flag5=1
              break
          for m in range (b1):
            if temp6==H[m]:
              flag6=1
              break
          if flag4==0 or flag5==0 or flag6==0:
            continue
          number=number+1             # counts the number of tuples (i,j,k,l) forming a clique
          print("the tuple (",i,",",j,",",k,",",l,") forms a clique" )
  print("The number of cliques of order four in the Peisert-like graph G*(p^r) is ",number)
  return 1


def raised(k):                        # this returns the value of i^k 
  if (k%4)==0:
    return 1
  elif (k%4)==1:
    return complex(0,1)
  elif (k%4)==2:
    return -1
  else:
    return complex(0,1)*(-1)

# the function below calculates the Jacobi sums rho:=J(\chi_4,\chi_4) and zi:=J(\chi_4,\phi) where \chi_4(g)=i, a primitive fourth root of unity and phi is the quadratic character, and g is the generator of Z_n^*
def jacobi_sums(n,zn,a):      
  pos_x, pos_x1=0,0
  rho=0
  zi=0
  for i in range(totient(n)):
    x=zn[i]
    x1=(1-x)%n
    if gcd(x1,n)==1:
      for j in range(totient(n)):          # finds pos_x such that g^pos_x=x
        if a[j]==x:
          pos_x=j
          break
      for j in range(totient(n)):          # finds pos_x1 such that g^pos_x1=1-x
        if a[j]==x1:
          pos_x1=j
          break
      rho=rho+raised(pos_x+pos_x1)
      zi=zi+raised(pos_x+2*pos_x1)
  print("The Jacobi sum rho:=J(\chi_4,\chi_4) is ",rho)
  print("The Jacobi sum zi:=J(\chi_4,\phi) is ",zi)
  return 1


def hypergeom_sums(n,zn,a):                 # this function calculates the hypergeometric terms M_3 and M_5
  x,x1=0,0 
  pos_x, pos_x1=0,0
  sum3,sum5=0,0
  temp=0
  pos_y, pos_y1, pos_xy=0,0,0
 # For calculating the hypergeometric terms, which are double summations, we assume that the outer summation is indexed by x and the inner summation is indexed by y
  for i in range(totient(n)):
    x=zn[i]
    x1=(1-x)%n
    if gcd(x1,n)==1:
      for j in range(totient(n)):           # finds pos_x such that g^pos_x=x
        if a[j]==x:
          pos_x=j
          break
      for j in range(totient(n)):           # finds pos_x1 such that g^pos_x1=1-x
        if a[j]==x1:
          pos_x1=j
          break
      temp=raised(pos_x+pos_x1)             # \chi_4(x(1-x))
      temp1, tempo1=0,0
      for k in range(totient(n)):
        y=zn[k]
        y1=(1-y)%n
        xy=(x-y)%n
        if (gcd(y1,n)!=1) or (gcd(xy,n)!=1):
          continue
        for l in range(totient(n)):         # finds pos_y such that g^pos_y=y
          if a[l]==y:
           pos_y=l
           break
        for l in range(totient(n)):         # finds pos_y1 such that g^pos_y1=1-y
          if a[l]==y1:
            pos_y1=l
            break
        for l in range(totient(n)):         # finds pos_xy such that g^pos_xy=x-y
          if a[l]==xy:
            pos_xy=l
            break
        temp1=temp1+raised(pos_y+pos_y1+pos_xy)                    # \chi_4(y(1-y)(x-y)) 
        tempo1=tempo1+raised(pos_y)*np.conj(raised(pos_y1+pos_xy)) # \chi_4(y)\overline{\chi_4(1-y)(x-y))} for M_5      
      temp1=np.conj(temp1)                                         # \overline{\chi_4(y(1-y)(x-y))} for M_3
      sum3=sum3+temp*temp1                                         # calculates M_3 which involves the sum  \chi_4(x(1-x))\overline{\chi_4(y(1-y)(x-y))}
      sum5=sum5+temp*tempo1                                   # calculates M_5 which involves the sum  \chi_4(x(1-x))\chi_4(y)\overline{\chi_4((1-y)(x-y))}

  print("The hypergeometric sum M_3 is ",sum3)
  print("The hypergeometric sum M_5 is ",sum5)


def main():
  print("enter a prime p congruent to 1 modulo 8")
  p = int(input())
  print("enter a positive integer r")
  r = int(input())
  n=int(pow(p,r))
  zn=list()
  div=list()
  g = 0

  for i in range(1,n):
    if gcd(i,n)==1:
      zn.append(i)                          # zn contains the elements of Z_n^*
  print ("Z_n^* is ",zn)

  for i in range(1, int(totient(n)/2)+1):
    if totient(n)%i==0:
      div.append(i)                         # div contains all the positive divisors of phi(n), except phi(n)
  ldiv=len(div)
  for i in range(totient(n)):               # this loop finds g, a generator of Z_n^*. Each element a1 in Z_n^* is considered, and if a1^dd=1 in Z_n^* for some dd in div, then a1 is discarded 
    var=0
    a1=zn[i]
    for d in range (ldiv):
      dd=div[d]
      if (pow(a1,dd)%n)==1:
        var=1
        break
    if var==0:
      g=a1
      break
  print("generator of Z_n^*, g, is ",g)
  g1=g*g*g*g%n

  H=list()                                  # H is the connection set of the graph G*(p^r)
  for i in range(1, int(totient(n)/4)+1):
    temp=1
    for j in range(1, i+1):
      temp=temp*g1
    H.append(temp%n)                        # powers of g^4, that is, elements of <g^4>, are appended to H
  for i in range(int(totient(n)/4)):
    H.append((H[i]*g)%n)                    # elements of g<g^4> are appended to H
  print("The connection set H is ",H)
  a=list()
  for i in range(totient(n)):
    s=(int)(pow(g,i))
    a.append(s%n)                           # a stores all the powers of the generator g, that is, 1,g,g^2,..,g^{totient(n)-1}


  cliques_four(n, H)
  jacobi_sums(n,zn,a)
  hypergeom_sums(n,zn,a)
main()
